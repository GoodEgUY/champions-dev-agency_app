import React, { useState } from "react";
import axios from "axios";
import "./modalcallback.css";

const ModalCallback = (props) => {
  const [clientName, setClientName] = useState("");
  const [clientPhone, setClientPhone] = useState("");

  const botToken = "5587720022:AAGPlmL4fMRtfrYhucq4deEwBAGHJwzfh6E";
  const urlApi = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const chatId = "-1001526555815";
  const [success, setSuccess] = useState("");

  const sendAlert = (e) => {
    e.preventDefault();

    let message = `<b>ü§©–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ü§©</b>\n`;
    message += `<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> ${clientName}\n`;
    message += `<b>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</b> ${clientPhone}`;
    axios
      .post(urlApi, {
        chat_id: chatId,
        parse_mode: "html",
        text: message,
      })
      .then((res) => {
        setSuccess(true);
      })
      .catch((err) => {
        setSuccess(false);
      })
      .finally(() => {});
  };

  return (
    <>
      {success ? (
        <div className="modalWrapper">
          <div className="modalCallbackBody">
            <img
              src="./images/cross.png"
              className="closeModal"
              alt="Close"
              width="24"
              height="24"
              onClick={props.closeModal}
            />
            
              <span className="successAlert">–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ<br/> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è<br/> –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.</span>
            
          </div>
        </div>
      ) : (
        <div className="modalWrapper">
          <div className="modalCallbackBody">
            <img
              src="./images/cross.png"
              className="closeModal"
              alt="Close"
              width="24"
              height="24"
              onClick={props.closeModal}
            />
            <div className="callbackFormContent">
              <h4> –ü–æ–¥–∫–ª—é—á–∏–º –≤–∞—à –±–∏–∑–Ω–µ—Å –æ–±—â–µ–ø–∏—Ç–∞ –∫ mobile super app –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –†–æ—Å—Å–∏–∏</h4>
              <p>
              –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç
              </p>
              <form action="" className="callbackForm" onSubmit={sendAlert}>
                <input
                  type="name"
                  name="name"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  value={clientName}
                  onChange={(event) => setClientName(event.target.value)}
                />
                <input
                  type="tel"
                  name="phone"
                  placeholder="+XXX XXX XXX"
                  value={clientPhone}
                  onChange={(event) => setClientPhone(event.target.value)}
                />
                <button className="callbackModalBtn" type="submit">
                  –û–¢–ü–†–ê–í–ò–¢–¨
                </button>
              </form>
              <span className="policyTitle">
                –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å<br />
                <a href="#">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
              </span>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default ModalCallback;
